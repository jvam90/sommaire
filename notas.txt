NextJS: framework react

-app: diretório que contém o fonte da aplicação
-app/layout.tsx: arquivo que define coisas como fontes, cabeçalhos e rodapés: só precisam ser usados uma vez
-app/globals.css: estilo de elementos globais da aplicação
-eslint-config.mjs: configuração do eslint
-next.config.ts: arquivo de configuração do projeto definido em uma classe typescript
-postcss.config.mjs: arquivo de configuração da transpilação de tailwind pra css
-tsconfig.json: configuração do typescript no projeto como um todo


Link do NextJS:

Funciona como um link normal, mas já podendo aplicar o redirecionamento da forma que o next utiliza, por arquivos.

Componentes:

Foi criado um componente para cada parte: cabeçalho, rodapé e links (navlink) dentro da pasta 'components'
O navlink ficou da seguinte forma:

"use client";
import { cn } from "@/lib/utils";
import Link from "next/link";
import { usePathname } from "next/navigation";

export default function NavLink({
  href,
  children,
  className,
}: {
  href: string;
  children: React.ReactNode;
  className?: string;
}) {
  const pathname = usePathname();
  const isActive =
    pathname === href || (href !== "/" && pathname.startsWith(href));
  return (
    <Link
      href={href}
      className={cn(
        "transition-colors text-sm duration-200 text-gray-600 hover:text-rose-500",
        className,
        isActive && "text-rose-500"
      )}
    >
      {children}
    </Link>
  );
}

Ele recebe o href, children e className de fora, podendo usar a função cn do chadcn para combinar estilos do elemento com os 
vindos do parâmetro.